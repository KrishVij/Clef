#include<stdio.h>
#include<math.h>
#include"portaudio.h"

#define FRAMES_PER_BUFFER  (64)

#ifndef M_PI
#define M_PI  (3.14159265)
#endif

typedef struct
{
  float freq_hz;
  int duration_ms;
}my_data;

static int my_Callback( const void *inputBuffer, void *outputBuffer,
			unsigned long framesPerBuffer,
		const PaStreamCallbackTimeInfo* timeInfo,
		 PaStreamCallbackFlags statusFlags,
		 void *userData )
{

  my_data *data = (my_data *)userData;
  float *output = (float *) outputBuffer;

  (void) timeInfo; 
  (void) statusFlags;
  (void) inputBuffer;

  unsigned long i;

  for (i = 0; i < framesPerBuffer; i++) {

    float time_in_seconds =  1/100.0;

    *output++ = 1.0 * sin(2 * M_PI * 1.0 * time_in_seconds + 0.0);
    
  }

  return paContinue;
  
}

int main()
{

  PaError error;
  PaStreamParameters outputParameters;
  PaDeviceIndex number_of_devices;
  const PaDeviceInfo *my_device;

  my_data my_data_in_main =
    {
      .freq_hz = 50,
      .duration_ms  = 20,
    };
  
  error = Pa_Initialize();
  if (error != paNoError) {

    fprintf(stderr, "ERROR: Failed To Initialize PortAudio (%s)\n", Pa_GetErrorText(error));
    return -1;
  }
  
  number_of_devices = Pa_GetDeviceCount();
  printf("The Number of Detected devices are: %d\n", number_of_devices);
  outputParameters.device = Pa_GetDefaultOutputDevice();
  printf("The default outputDevice is: %d\n",  outputParameters.device);

  for (size_t i = 0; i < number_of_devices; i++) {

    my_device = Pa_GetDeviceInfo(i);
    printf("The Name of the device is: %s\n", my_device -> name);
  }

  PaStream *Stream;

  error = Pa_OpenDefaultStream(&Stream, 0, 3, paFloat32, 200, paFramesPerBufferUnspecified, my_Callback, &my_data_in_main);
  if (error != paNoError) {

    fprintf(stderr, "ERROR: Failed To Open Default Audio Stream: (%s)\n", Pa_GetErrorText(error));
    return -1;
  }

  error = Pa_StartStream( Stream );
  if (error != paNoError) {
    fprintf(stderr, "ERROR: Failed To Start The Stream: (%s)\n", Pa_GetErrorText(error));
    return -1;
  }

  error = Pa_StopStream( Stream );
  if( error != paNoError ) {

    fprintf(stderr, "ERROR: Failed To Stop The Stream: (%s)\n", Pa_GetErrorText(error));
    return -1;
  }

  error = Pa_CloseStream( Stream );
  if( error != paNoError ) {

    fprintf(stderr, "ERROR: Failed To Close The Stream: (%s)\n", Pa_GetErrorText(error));
    return -1;
  }

  Pa_Terminate();
  puts(" Tune Played ");
}
